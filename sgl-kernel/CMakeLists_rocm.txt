cmake_minimum_required(VERSION 3.24 FATAL_ERROR)
project(sgl_kernel LANGUAGES CXX)

# Cmake
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_SHARED_LIBRARY_PREFIX "")

set(CMAKE_COLOR_DIAGNOSTICS ON)
set(CMAKE_VERBOSE_MAKEFILE ON CACHE BOOL "ON")

# Python / Torch
find_package(Python COMPONENTS Interpreter Development.Module ${SKBUILD_SABI_COMPONENT} REQUIRED)

execute_process(
  COMMAND ${Python_EXECUTABLE} -c "import torch; print(torch.utils.cmake_prefix_path)"
  OUTPUT_VARIABLE TORCH_PY_PREFIX
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

set(Torch_DIR "${TORCH_PY_PREFIX}/Torch")
list(APPEND CMAKE_PREFIX_PATH "${TORCH_PY_PREFIX}/Torch")
find_package(Torch REQUIRED)

execute_process(
  COMMAND ${Python_EXECUTABLE} -c "import torch; print(int(torch._C._GLIBCXX_USE_CXX11_ABI))"
  OUTPUT_VARIABLE TORCH_CXX11_ABI
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
if(TORCH_CXX11_ABI STREQUAL "0")
  add_compile_definitions(_GLIBCXX_USE_CXX11_ABI=0)
else()
  add_compile_definitions(_GLIBCXX_USE_CXX11_ABI=1)
endif()

# ROCm/HIP
enable_language(HIP)
find_package(hip REQUIRED CONFIG)

# Determine AMDGPU target:
# 1) ENV(AMDGPU_TARGET) if provided; else
# 2) query torch (ROCm build) for gcnArchName; else
# 3) default to gfx942.
set(AMDGPU_TARGET_DEFAULT "gfx942")
set(AMDGPU_TARGET_ENV "$ENV{AMDGPU_TARGET}")

if(AMDGPU_TARGET_ENV)
  set(AMDGPU_TARGETS "${AMDGPU_TARGET_ENV}")
else()
  execute_process(
    COMMAND ${Python_EXECUTABLE} -c
      "import sys, torch;
try:
  n=torch.cuda.device_count();
  print(torch.cuda.get_device_properties(0).gcnArchName.split(':')[0] if n else '')
except Exception:
  print('')"
    OUTPUT_VARIABLE DETECTED_ARCH
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(DETECTED_ARCH)
    set(AMDGPU_TARGETS "${DETECTED_ARCH}")
  else()
    message(WARNING "torch.cuda not available or detection failed; using default ${AMDGPU_TARGET_DEFAULT}")
    set(AMDGPU_TARGETS "${AMDGPU_TARGET_DEFAULT}")
  endif()
endif()

if(NOT (AMDGPU_TARGETS STREQUAL "gfx942" OR AMDGPU_TARGETS STREQUAL "gfx950"))
  message(FATAL_ERROR "Unsupported AMDGPU_TARGET '${AMDGPU_TARGETS}'. Expected 'gfx942' or 'gfx950'.")
endif()

# Expose targets to HIP toolchain
# (AMDGPU_TARGETS is honored by the HIP Clang toolchain)
set(CMAKE_HIP_ARCHITECTURES "${AMDGPU_TARGETS}")

# FP8 macro selection (matches your setup.py)
if(AMDGPU_TARGETS STREQUAL "gfx942")
  set(SGL_FP8_MACRO "HIP_FP8_TYPE_FNUZ")
else()
  set(SGL_FP8_MACRO "HIP_FP8_TYPE_E4M3")
endif()

# Paths / includes
set(PROJ_ROOT ${CMAKE_CURRENT_LIST_DIR})
set(SGL_INCLUDE_DIRS
  ${PROJ_ROOT}/include
  ${PROJ_ROOT}/include/impl
  ${PROJ_ROOT}/csrc
  ${TORCH_INCLUDE_DIRS}
)

# Platform-specific library directory
set(PLAT_LIB_DIR "/usr/lib/x86_64-linux-gnu")
link_directories(${PLAT_LIB_DIR})

# Sources
set(SOURCES
${PROJ_ROOT}/csrc/moe/moe_align_kernel.hip
${PROJ_ROOT}/csrc/moe/moe_topk_softmax_kernels.hip
${PROJ_ROOT}/csrc/kvcacheio/transfer.hip
${PROJ_ROOT}/csrc/speculative/eagle_utils.hip
${PROJ_ROOT}/csrc/allreduce/custom_all_reduce.hip
${PROJ_ROOT}/csrc/grammar/apply_token_bitmask_inplace_hip.hip
${PROJ_ROOT}/csrc/elementwise/activation.hip
${PROJ_ROOT}/csrc/common_extension_rocm.cc
${PROJ_ROOT}/csrc/allreduce/quick_all_reduce.hip
)
set_source_files_properties(
  ${SOURCES}
  PROPERTIES
    LANGUAGE HIP
)

# Compile / Link flags
add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-O3>)

set(SGL_HIP_FLAGS
  -DNDEBUG
  -DOPERATOR_NAMESPACE=sgl_kernel
  -O3
  -std=c++17
  -DENABLE_BF16
  -DENABLE_FP8
  -D${SGL_FP8_MACRO}
)
set(CMAKE_HIP_ARCHITECTURES "${AMDGPU_TARGETS}")

# Python extension
Python_add_library(common_ops MODULE USE_SABI ${SKBUILD_SABI_VERSION} WITH_SOABI ${SOURCES})
target_include_directories(common_ops PRIVATE ${SGL_INCLUDE_DIRS})


# Apply per-language flags
target_compile_options(common_ops PRIVATE
  $<$<COMPILE_LANGUAGE:HIP>:${SGL_HIP_FLAGS}>
)

target_link_libraries(common_ops PRIVATE
  ${TORCH_LIBRARIES}
  hip::device
  hip::host
  hiprtc
  amdhip64
)

target_link_options(common_ops PRIVATE
  "SHELL:-Wl,-rpath,'\$ORIGIN/../../torch/lib'"
)

install(TARGETS common_ops
  LIBRARY DESTINATION sgl_kernel
)